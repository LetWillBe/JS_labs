'use strict';

let str = "some";
let strObj = new String(str);

console.log(typeof(str));//string
console.log(typeof(strObj));//object

//прототипно-ориентированное наследование

console.dir([1, 2, 3]);//создаём экземпляр массива
// _proto_: Array(0) - к нему можно применить методы для массива
//т.е. эта струтктура подходит под прототип "массив"
//и на неё можно воздействовать как на массив
//так же у массива можно найти _proto_:Object
//т.е. на массив можно применить методы для объекта
//или, другими словами, массив наследует методы от объекта
//А мы уже знаем что массив - это частный случай объекта


//Объекты так же могут наследовать методы друг от друга(привет, React!)
const soldier = {
	hp: 500,
	armor: 100,
	sayUra: function () {
		console.log("УРАА!!!");
	}
};
const max = {
	hp: 250,
};

//устаревшая запись(deprecated)
max._proto_ = soldier;//объект soldier является пртотипом объекта мax
// т.е. max будет иметь свои особенные свойства, а недостающие наследовать от объекта soldier

console.log(max.armor);//100
console.log(max.hp);//250
max.sayUra;//УРАА!!!

//вместо _proto_ лучше ипользовать
Object.create();//создаёт новый объект с указанным прототипом и свойствами.
Object.getPrototypeOf();//возвращает прототип (то есть, внутреннее свойство [[Prototype]]) указанного объекта.
Object.setPrototypeOf();//устанавливает прототип (то есть, внутреннее свойство [[Prototype]]) указанного объекта в другой объект или null

Object.setPrototypeOf(max, soldier);//вместо max._proto_ = soldier

const Ivan = Object.create(soldier);//создаём объект Ivan который наследуется от прототипа soldier

//ООП - это о том как делать правильную архитектуру